#compdef github

_github() {
  if (( CURRENT > 2 )); then
    # shift words so _arguments doesn't have to be concerned with second command
    (( CURRENT-- ))
    shift words
    # use _call_function here in case it doesn't exist
    _call_function 1 _github_${words[1]}
  else
    _values "github command" \
      "admin[Open this repo's Admin panel a web browser.]" \
      "browse[Open this repo in a web browser.]" \
      "clone[Clone a repo. Uses ssh if current user is]" \
      "config[Automatically set configuration info, or pass args to specify.]" \
      "create[Create a new, empty GitHub repository]" \
      "create-from-local[Create a new GitHub repository from the current local repository]" \
      "fetch[Fetch from a remote to a local branch.]" \
      "fetch_all[Fetch all refs from a user]" \
      "fork[Forks a GitHub repository]" \
      "home[Open this repo's master branch in a web browser.]" \
      "ignore[Ignore a SHA (from 'github network commits')]" \
      "info[Info about this project.]" \
      "issues[Project issues tools]" \
      "open[Open the given user/project in a web browser]" \
      "network[Project network tools.]" \
      "pull[Pull from a remote.]" \
      "pull-request[Generate the text for a pull request.]" \
      "search[Search GitHub for the given repository name.]" \
      "track[Track another user's repository.]"
  fi
}

_github_pull() {
  _arguments \
    "--merge[Automatically merge remote's changes into your master.]"
}
_github_clone() {
  _arguments \
    "--search[Search for user|repo and clone selected repository]" \
    "--ssh[Clone using the git@github.com style url.]"
}

_github_track() {
  _arguments \
    "--private[Use git@github.com: instead of git://github.com/.]" \
    "--ssh[Equivalent to --private.]"
}

_github_network() {
  if (( CURRENT > 2 )); then
    # shift words so _arguments doesn't have to be concerned with second command
    (( CURRENT-- ))
    shift words
    # use _call_function here in case it doesn't exist
    _call_function 1 _github_network_${words[1]}
  else
    _values "github network command" \
     "web[Open network in a web browser.]" \
     "list[List networked repositories.]" \
     "fetch[Fetched commits for a given networked repository.]" \
     "commits[List networked commits not pulled into this repo.]"
  fi
}
_github_create(){
  _arguments \
    "--markdown[Create README.markdown]" \
    "--mdown[Create README.mdown]" \
    "--private[Create private repository]" \
    "--rdoc[Create README.rdoc]" \
    "--rst[Create README.rst]" \
    "--textile[Create README.textile]"
}

_github_network_commits() {
  _arguments \
    "--project[Filter commits on a certain project.]" \
    "--author[Filter commits on a email address of author.]" \
    "--common[Show common branch point.]" \
    "--nocache[Do not use the cached network data.]" \
    "--sort[How to sort : date(*), branch, author.]" \
    "--thisbranch[Look at branches that match the current one]" \
    "--applies[Filter commits to patches that apply cleanly.]" \
    "--limit[Only look through the first X heads - useful for really large projects]" \
    "--before[Only show commits before a certain date.]" \
    "--after[Only show commits after a certain date.]" \
    "--shas[Only show shas.]" \
    "--cache[Use the network data even if it's expired.]" \
    "--noapply[Filter commits to patches that do not apply cleanly.]"
}

_github_issues() {
  if (( CURRENT > 2 )); then
    # shift words so _arguments doesn't have to be concerned with second command
    (( CURRENT-- ))
    shift words
    # use _call_function here in case it doesn't exist
    _call_function 1 _github_issues_${words[1]}
  else
    _values "github issues command" \
      "open[list open issues]" \
      "closed[list closed issues]"
  fi
}
_github_issues_open(){
  _arguments \
    "--after[Only show issues updated after a certain date]" \
    "--label[Only show issues with a certain label]"
}
_github_create-from-local(){  
  _arguments \
    "--private[Create private repository]"
}

_github_issues_closed(){
  _arguments \
    "--after[Only show issues updated after a certain date]" \
    "--label[Only show issues with a certain label]"
}

_github_track(){
  _arguments \
  "--private[Use git@github.com: instead of git://github.com/.]" \
  "--ssh[Equivalent to --private]"
}
